generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Test {
  id   String @id @default(uuid())
  test String
}

model User {
  id               String           @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  stripeCustomerId String?          @unique
  role             String?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  courses          Course[]
  enrollment       Enrollment[]
  lessonProgress   LessonProgress[]
  reviews          Review[]
  accounts         Account[]
  sessions         Session[]

  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String   @unique
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  impersonatedBy String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Course {
  id               String       @id @default(uuid())
  title            String
  description      String
  fileKey          String
  price            Int
  duration         Int
  level            CourseLevel  @default(Beginner)
  stripePriceId    String       @unique
  category         String
  smallDescription String
  slug             String       @unique
  status           CourseStatus @default(Drafted)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  userId           String
  chapter          Chapter[]
  User             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment       Enrollment[]
  reviews          Review[]
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  userId    String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Chapter {
  id        String   @id @default(uuid())
  title     String
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String
  Course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id             String           @id @default(uuid())
  title          String
  description    String?
  thumbnailKey   String?
  videoKey       String?
  position       Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  chapterId      String
  Chapter        Chapter          @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  lessonProgress LessonProgress[]
}

model Enrollment {
  id        String           @id @default(uuid())
  amount    Int
  status    EnrollmentStatus @default(Pending)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  courseId  String
  userId    String
  Course    Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model LessonProgress {
  id        String   @id @default(uuid())
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  lessonId  String?
  Lesson    Lesson?  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Drafted
  Published
  Archived
}

enum EnrollmentStatus {
  Pending
  Active
  Cancelled
}
